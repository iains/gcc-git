## Linker script for GNU versioning (GNU ld 2.13.91+ only.)
##
## Copyright (C) 2002-2023 Free Software Foundation, Inc.
##
## This file is part of the GNU ISO C++ Library.  This library is free
## software; you can redistribute it and/or modify it under the
## terms of the GNU General Public License as published by the
## Free Software Foundation; either version 3, or (at your option)
## any later version.
##
## This library is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with this library; see the file COPYING3.  If not see
## <http://www.gnu.org/licenses/>.

# Symbols in the support library (libsupc++) have their own tag.
CXXABI_1.3 {

  global:
    __cxa_allocate_exception;
    __cxa_bad_cast;
    __cxa_bad_typeid;
    __cxa_begin_catch;
    __cxa_begin_cleanup;
    __cxa_call_unexpected;
    __cxa_current_exception_type;
    __cxa_demangle;
    __cxa_end_catch;
    __cxa_end_cleanup;
    __cxa_free_exception;
    __cxa_get_globals;
    __cxa_get_globals_fast;
    __cxa_guard_abort;
    __cxa_guard_acquire;
    __cxa_guard_release;
    __cxa_pure_virtual;
    __cxa_rethrow;
    __cxa_throw;
    __cxa_type_match;
    __cxa_vec_ctor;
    __cxa_vec_cctor;
    __cxa_vec_cleanup;
    __cxa_vec_delete;
    __cxa_vec_delete2;
    __cxa_vec_delete3;
    __cxa_vec_dtor;
    __cxa_vec_new;
    __cxa_vec_new2;
    __cxa_vec_new3;
    __gxx_personality_v0;
    __gxx_personality_sj0;
    __gxx_personality_seh0;
    __dynamic_cast;

    # *_type_info classes, ctor and dtor
    _ZN10__cxxabiv117__array_type_info*;
    _ZN10__cxxabiv117__class_type_info*;
    _ZN10__cxxabiv116__enum_type_info*;
    _ZN10__cxxabiv120__function_type_info*;
    _ZN10__cxxabiv123__fundamental_type_info*;
    _ZN10__cxxabiv117__pbase_type_info*;
    _ZN10__cxxabiv129__pointer_to_member_type_info*;
    _ZN10__cxxabiv119__pointer_type_info*;
    _ZN10__cxxabiv120__si_class_type_info*;
    _ZN10__cxxabiv121__vmi_class_type_info*;

    # *_type_info classes, member functions
    _ZNK10__cxxabiv117__class_type_info*;
    _ZNK10__cxxabiv120__function_type_info*;
    _ZNK10__cxxabiv117__pbase_type_info*;
    _ZNK10__cxxabiv129__pointer_to_member_type_info*;
    _ZNK10__cxxabiv119__pointer_type_info*;
    _ZNK10__cxxabiv120__si_class_type_info*;
    _ZNK10__cxxabiv121__vmi_class_type_info*;

    # virtual table
    _ZTVN10__cxxabiv117__array_type_infoE;
    _ZTVN10__cxxabiv117__class_type_infoE;
    _ZTVN10__cxxabiv116__enum_type_infoE;
    _ZTVN10__cxxabiv120__function_type_infoE;
    _ZTVN10__cxxabiv123__fundamental_type_infoE;
    _ZTVN10__cxxabiv117__pbase_type_infoE;
    _ZTVN10__cxxabiv129__pointer_to_member_type_infoE;
    _ZTVN10__cxxabiv119__pointer_type_infoE;
    _ZTVN10__cxxabiv120__si_class_type_infoE;
    _ZTVN10__cxxabiv121__vmi_class_type_infoE;

    # typeinfo structure (and some names)
    _ZTI[a-fh-mp-z];
    _ZTIP[a-fh-mp-z];
    _ZTIPK[a-fh-mp-z];
    _ZTIN10__cxxabiv117__array_type_infoE;
    _ZTIN10__cxxabiv117__class_type_infoE;
    _ZTIN10__cxxabiv116__enum_type_infoE;
    _ZTIN10__cxxabiv120__function_type_infoE;
    _ZTIN10__cxxabiv123__fundamental_type_infoE;
    _ZTIN10__cxxabiv117__pbase_type_infoE;
    _ZTIN10__cxxabiv129__pointer_to_member_type_infoE;
    _ZTIN10__cxxabiv119__pointer_type_infoE;
    _ZTIN10__cxxabiv120__si_class_type_infoE;
    _ZTIN10__cxxabiv121__vmi_class_type_infoE;

    # typeinfo name
    _ZTS[a-fh-mp-z];
    _ZTSP[a-fh-mp-z];
    _ZTSPK[a-fh-mp-z];
    _ZTSN10__cxxabiv117__array_type_infoE;
    _ZTSN10__cxxabiv117__class_type_infoE;
    _ZTSN10__cxxabiv116__enum_type_infoE;
    _ZTSN10__cxxabiv120__function_type_infoE;
    _ZTSN10__cxxabiv123__fundamental_type_infoE;
    _ZTSN10__cxxabiv117__pbase_type_infoE;
    _ZTSN10__cxxabiv129__pointer_to_member_type_infoE;
    _ZTSN10__cxxabiv119__pointer_type_infoE;
    _ZTSN10__cxxabiv120__si_class_type_infoE;
    _ZTSN10__cxxabiv121__vmi_class_type_infoE;

    # __gnu_cxx::_verbose_terminate_handler()
    _ZN9__gnu_cxx27__verbose_terminate_handlerEv;

    # operator new(size_t)
    _Znw[jmy];
    # operator new(size_t, std::nothrow_t const&)
    _Znw[jmy]RKSt9nothrow_t;

    # operator delete(void*)
    _ZdlPv;
    # operator delete(void*, std::nothrow_t const&)
    _ZdlPvRKSt9nothrow_t;

    # operator new[](size_t)
    _Zna[jmy];
    # operator new[](size_t, std::nothrow_t const&)
    _Zna[jmy]RKSt9nothrow_t;

    # operator delete[](void*)
    _ZdaPv;
    # operator delete[](void*, std::nothrow_t const&)
    _ZdaPvRKSt9nothrow_t;

    _ZSt15get_new_handlerv;
    _ZSt15set_new_handlerPFvvE;

    _ZSt14get_unexpectedv;
    _ZSt14set_unexpectedPFvvE;

    _ZSt7nothrow;

    _ZT[SIV]St9exception;
    _ZNSt9exceptionD[012]Ev;
    _ZNKSt9exception4whatEv;

    _ZT[SIV]St13bad_exception;
    _ZNSt13bad_exceptionD[012]Ev;
    _ZNKSt13bad_exception4whatEv;

    _ZSt18uncaught_exceptionv;
    _ZSt19uncaught_exceptionsv;

    _ZSt9terminatev;
    _ZSt13get_terminatev;
    _ZSt13set_terminatePFvvE;

    _ZT[SIV]St8bad_cast;
    # _ZNSt8bad_castC[12]Ev;
    _ZNSt8bad_castD[012]Ev;
    _ZNKSt8bad_cast4whatEv;

    _ZT[SIV]St10bad_typeid;
    # _ZNSt10bad_typeidC[12]Ev;
    _ZNSt10bad_typeidD[012]Ev;
    _ZNKSt10bad_typeid4whatEv;
 
    _ZT[SIV]St9bad_alloc;
    # _ZNSt9bad_allocC[12]Ev;
    _ZNSt9bad_allocD[012]Ev;
    _ZNKSt9bad_alloc4whatEv;

    _ZT[SIV]St9type_info;
    _ZNSt9type_infoD[012]Ev;
    _ZNKSt9type_info14__is_pointer_pEv;
    _ZNKSt9type_info15__is_function_pEv;

  # DO NOT DELETE THIS LINE.  Port-specific symbols, if any, will be here.

};

CXXABI_1.3.1 {

    __cxa_get_exception_ptr;

} CXXABI_1.3;

CXXABI_1.3.2 {

    # typeinfo structures
    _ZTIN10__cxxabiv115__forced_unwindE;
    _ZTIN10__cxxabiv119__foreign_exceptionE;

} CXXABI_1.3.1;

CXXABI_1.3.3 {

    # typeinfo for char16_t and char32_t
    _ZTIDs;
    _ZTIPDs;
    _ZTIPKDs;
    _ZTIDi;
    _ZTIPDi;
    _ZTIPKDi;

#ifdef HAVE_EXCEPTION_PTR_SINCE_GCC46
    # exception_ptr
    _ZNSt15__exception_ptr13exception_ptrC[12]Ev;
    _ZNSt15__exception_ptr13exception_ptrC[12]ERKS0_;
    _ZNSt15__exception_ptr13exception_ptrC[12]EMS0_FvvE;
    _ZNSt15__exception_ptr13exception_ptrD[12]Ev;
    _ZNSt15__exception_ptr13exception_ptraSERKS0_;
    _ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv;
    _ZNKSt15__exception_ptr13exception_ptrntEv;
    _ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv;
    _ZNSt15__exception_ptr13exception_ptr4swapERS0_;
    _ZNSt15__exception_ptreqERKNS_13exception_ptrES2_;
    _ZNSt15__exception_ptrneERKNS_13exception_ptrES2_;

    _ZSt17current_exceptionv;
    _ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE;
#endif

} CXXABI_1.3.2;

CXXABI_1.3.4 {

    # typeinfo for decimal floating point types
    _ZTID[fde];
    _ZTIPD[fde];
    _ZTIPKD[fde];

} CXXABI_1.3.3;

CXXABI_1.3.5 {

    # typeinfo for decltype(nullptr)
    _ZTIDn;
    _ZTIPDn;
    _ZTIPKDn;

    # typeinfo for __int128 and unsigned __int128
    _ZTI[no];
    _ZTIP[no];
    _ZTIPK[no];

    # Default function.
    _ZSt11_Hash_bytesPKv*;

    # FNV hash.
    _ZSt15_Fnv_hash_bytesPKv*;

#ifdef HAVE_EXCEPTION_PTR_SINCE_GCC46
    # std::nested_exception
    _ZNSt16nested_exceptionD*;
    _ZTISt16nested_exception;
    _ZTVSt16nested_exception;
#endif

} CXXABI_1.3.4;

CXXABI_1.3.6 {

    __cxa_allocate_dependent_exception;
    __cxa_free_dependent_exception;
    __cxa_deleted_virtual;

} CXXABI_1.3.5;

CXXABI_1.3.7 {
    __cxa_thread_atexit;
} CXXABI_1.3.6;

CXXABI_1.3.8 {
    __cxa_throw_bad_array_new_length;
    _Z*St20bad_array_new_length*;

    __cxa_throw_bad_array_length;
    _Z*St16bad_array_length*;

    # Virtual table verification stub functions.
    _Z17__VLTRegisterPair*;
    _Z22__VLTRegisterPairDebug*;
    _Z16__VLTRegisterSet*;
    _Z21__VLTRegisterSetDebug*;
    _Z24__VLTVerifyVtablePointer*;
    _Z29__VLTVerifyVtablePointerDebug*;
    __VLTChangePermission;

} CXXABI_1.3.7;

CXXABI_1.3.9 {

    # typeinfo name for __int128 and unsigned __int128
    _ZTS[no];
    _ZTSP[no];
    _ZTSPK[no];

    # operator delete(void*, std::size_t)
    _ZdlPv[jmy];
    # operator delete[](void*, std::size_t)
    _ZdaPv[jmy];

} CXXABI_1.3.8;

CXXABI_1.3.10 {

    # Support for the Transactional Memory TS (N4514)
    _ZGTtNKSt9exceptionD1Ev;
    _ZGTtNKSt9exception4whatEv;
    _ZGTtNKSt13bad_exceptionD1Ev;
    _ZGTtNKSt13bad_exception4whatEv;

    _ZN9__gnu_cxx9__freeresEv;

} CXXABI_1.3.9;

CXXABI_1.3.11 {

    __cxa_init_primary_exception;
    _ZNSt15__exception_ptr13exception_ptrC1EPv;

    # C++17 aligned new/delete
    _Znw[jmy]St11align_val_t;
    _Znw[jmy]St11align_val_tRKSt9nothrow_t;
    _Zna[jmy]St11align_val_t;
    _Zna[jmy]St11align_val_tRKSt9nothrow_t;
    _ZdlPvSt11align_val_t;
    _ZdlPvSt11align_val_tRKSt9nothrow_t;
    _ZdlPv[jmy]St11align_val_t;
    _ZdaPvSt11align_val_t;
    _ZdaPvSt11align_val_tRKSt9nothrow_t;
    _ZdaPv[jmy]St11align_val_t;

#ifndef HAVE_EXCEPTION_PTR_SINCE_GCC46
    # exception_ptr
    _ZNSt15__exception_ptr13exception_ptrC1Ev;
    _ZNSt15__exception_ptr13exception_ptrC2Ev;
    _ZNSt15__exception_ptr13exception_ptrC1ERKS0_;
    _ZNSt15__exception_ptr13exception_ptrC2ERKS0_;
    _ZNSt15__exception_ptr13exception_ptrC1EMS0_FvvE;
    _ZNSt15__exception_ptr13exception_ptrC2EMS0_FvvE;
    _ZNSt15__exception_ptr13exception_ptrD1Ev;
    _ZNSt15__exception_ptr13exception_ptrD2Ev;
    _ZNSt15__exception_ptr13exception_ptraSERKS0_;
    _ZNKSt15__exception_ptr13exception_ptrcvMS0_FvvEEv;
    _ZNKSt15__exception_ptr13exception_ptrntEv;
    _ZNKSt15__exception_ptr13exception_ptr20__cxa_exception_typeEv;
    _ZNSt15__exception_ptr13exception_ptr4swapERS0_;
    _ZNSt15__exception_ptreqERKNS_13exception_ptrES2_;
    _ZNSt15__exception_ptrneERKNS_13exception_ptrES2_;

    _ZSt17current_exceptionv;
    _ZSt17rethrow_exceptionNSt15__exception_ptr13exception_ptrE;

    # std::nested_exception
    _ZNSt16nested_exceptionD*;
    _ZTISt16nested_exception;
    _ZTVSt16nested_exception;
#endif

} CXXABI_1.3.10;

CXXABI_1.3.12 {

    # typeinfo for char8_t
    _ZTIDu;
    _ZTIPDu;
    _ZTIPKDu;

} CXXABI_1.3.11;

CXXABI_1.3.13 {

    # std::exception_ptr::_M_addref()
    _ZNSt15__exception_ptr13exception_ptr9_M_addrefEv;
    # std::exception_ptr::_M_release()
    _ZNSt15__exception_ptr13exception_ptr10_M_releaseEv;

} CXXABI_1.3.12;

CXXABI_1.3.14 {

    # typeinfo for _Float{16,32,64,128,32x,64x,128x} and
    # __bf16
    _ZTIDF[0-9]*[_bx];
    _ZTIPDF[0-9]*[_bx];
    _ZTIPKDF[0-9]*[_bx];
    _ZTIu6__bf16;
    _ZTIPu6__bf16;
    _ZTIPKu6__bf16;

} CXXABI_1.3.13;

CXXABI_1.3.15 {

  global:
    __cxa_call_terminate;

} CXXABI_1.3.14;

# Symbols in the support library (libsupc++) supporting transactional memory.
CXXABI_TM_1 {

  global:
    __cxa_tm_cleanup;

};
